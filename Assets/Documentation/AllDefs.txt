=== SOURCE DEF LISTS ===

--- CustomerDefs.cs ---
    public static List<CustomerDef> Defs => new List<CustomerDef>()
    {
        new CustomerDef()
        {
            DefName = "TownCouncil",
            Label = "town council",
            Description = "The town council is your employer and therefore most important customer. They give you monthly mandates for resources they need for various reason.",
            Backstory = "The town council owns the garden you are managing and expects you to deliver monthly orders for various reasons. The council is operating town activities like festivals, lunches, parties and fairs, as well as managing the town stockpiles.",
            IsWeeklyCustomer = false,
        },

        new CustomerDef()
        {
            DefName = "TownCanteen",    
            Label = "town canteen",
            Description = "The local canteen serving affordable lunches to public workers. Will order food exclusively.",
            Backstory = "Nestled behind the town hall, the Town Canteen has been around for decades, feeding bus drivers, clerks, and school staff with no-frills, hearty meals. It�s publicly funded and always on the lookout for reliable suppliers who can offer basic produce in steady quantities. Your garden caught their eye thanks to your note on the community board.",
            GoldRewardPerLevel = 5,
            OrderIncreases = new Dictionary<int, ResourceCollection>()
            {
                { 1, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Food, 5 } }) },
                { 3, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Food, 15 } }) },
                { 7, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Food, 20 } }) },
                { 11, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Food, 30 } }) },
                { 16, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Food, 40 } }) },
            },
        },

        new CustomerDef()
        {
            DefName = "LocalHerbalist",
            Label = "local herbalist",
            Description = "A small apothecary known for hand-crafted remedies and teas. Will order herbs exclusively.",
            Backstory = "Mira, the town herbalist, has run her shop for years, mixing poultices and calming infusions for anyone in need. Her shop smells like mint and mystery, and she�s always looking for a steady supply of quality herbs.",
            GoldRewardPerLevel = 5,
            OrderIncreases = new Dictionary<int, ResourceCollection>()
            {
                { 1, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Herbs, 10 } }) },
                { 6, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Herbs, 20 } }) },
                { 11, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Herbs, 30 } }) },
                { 16, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Herbs, 40 } }) },
            },
        },

        new CustomerDef()
        {
            DefName = "FestivalCommittee",
            Label = "festival committee",
            Description = "Requests beautiful decorations for town events and parades.",
            Backstory = "The town�s seasonal festival is a beloved tradition, and the committee is always preparing months in advance. They're happy to support your garden in exchange for fresh ornaments�flowers, petals, and other pleasant surprises.",
            GoldRewardPerLevel = 5,
            OrderIncreases = new Dictionary<int, ResourceCollection>()
            {
                { 1, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Ornaments, 10 } }) },
                { 6, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Ornaments, 10 }, { ResourceDefOf.Herbs, 10 } }) },
                { 11, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Ornaments, 15 }, { ResourceDefOf.Herbs, 15 } }) },
                { 16, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Ornaments, 20 }, { ResourceDefOf.Herbs, 20 } }) },
            },
        },

        new CustomerDef()
        {
            DefName = "StoveSmokeSupply",
            Label = "Stove & Smoke Supply Co.",
            Description = "Buys kindling in bulk for stoves and smokehouses.",
            Backstory = "A family-run supplier of firewood, smokehouse fuel, and oven starters. They�ve taken an interest in your garden�s renewable kindling output and want to see how reliable you can be.",
            GoldRewardPerLevel = 5,
            OrderIncreases = new Dictionary<int, ResourceCollection>()
            {
                { 1, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Kindle, 10 } }) },
                { 6, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Kindle, 20 } }) },
                { 11, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Kindle, 30 } }) },
                { 16, new(new Dictionary<ResourceDef, int>() { { ResourceDefOf.Kindle, 40 } }) },
            },
        },
    };

--- ModifierDefs.cs ---
    public static List<ModifierDef> Defs => new List<ModifierDef>()
    {
        new ModifierDef()
        {
            DefName = "VerdantlyIdolized",
            Label = "verdantly idolized",
            Description = "Blessed by the Verdant Idol. This object radiates fertile energy, enriching the soil beneath it.",
            IsStackable = false,
            Effect = new SelfEffect()
            {
                EffectOutcome = new EffectOutcome()
                {
                    ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                    {
                        { ResourceDefOf.Fertility, 1 },
                    },
                }
            },
        },

        new ModifierDef()
        {
            DefName = "Scorched",
            Label = "scorched",
            Description = "Was recently scorched by intense heat, reducing fertility.",
            IsStackable = false,
            Effect = new SelfEffect()
            {
                EffectOutcome = new EffectOutcome()
                {
                    ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                    {
                        { ResourceDefOf.Fertility, -1 },
                    },
                }
            }
        },
    };

--- ObjectDefs.cs ---
    public static List<ObjectDef> Defs => new List<ObjectDef>()
    {
        new ObjectDef()
        {
            DefName = "Carrot",
            Label = "carrot",
            Description = "Reliable and crisp. Grows underground, but always finds the light.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Vegetable,
                ObjectTagDefOf.Root,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "CompostHeap",
            Label = "compost heap",
            Description = "Old scraps, new life. Everything returns to the soil in time.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Fertilizer,
                ObjectTagDefOf.Compost,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Fertility, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "CornStalk",
            Label = "corn stalk",
            Description = "Tall and golden, swaying in the breeze. A sign of steady growth.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Vegetable,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "Mint",
            Label = "mint",
            Description = "A fresh, fragrant plant often used in teas and remedies.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Herb,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Herbs, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "FirePit",
            Label = "fire pit",
            Description = "Burns wood into kindling but scorches the soil.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Combustion,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Kindle, 2 },
                { ResourceDefOf.Fertility, -1 },
            },
        },

        new ObjectDef()
        {
            DefName = "Wildflower",
            Label = "wildflower",
            Description = "A wild flower with beautiful and colorful petals.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Flower,
                ObjectTagDefOf.Ornamental,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Ornaments, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "Flax",
            Label = "flax",
            Description = "A pale, wiry plant that�s more useful than it looks.",
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Flower,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Fiber, 1 },
            },
        },

        new ObjectDef()
        {
            DefName = "BeeHive",
            Label = "bee hive",
            Description = "The workers go where the flowers grow.",
            Tier = ObjectTierDefOf.Rare,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Animal,
                ObjectTagDefOf.Pollinator,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 1 },
                { ResourceDefOf.Ornaments, 1 },
            },
            Effects = new List<ObjectEffect>()
            {
                new AdjacencyEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Flower,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        NativeProductionModifier = 1
                    },
                },
            },
        },

        new ObjectDef()
        {
            DefName = "WickerFrame",
            Label = "wicker frame",
            Description = "Woven with care, it brings elegance to even the roughest fibers.",
            Tier = ObjectTierDefOf.Rare,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Crafting,
                ObjectTagDefOf.Ornamental,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Ornaments, 1 },
            },
            Effects = new List<ObjectEffect>()
            {
                new SelfAdjacencyEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        NativeProductionAny = new List<ResourceDef>()
                        {
                            ResourceDefOf.Fiber,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Ornaments, 1 },
                        },
                    },
                },
            },
        },

        new ObjectDef()
        {
            DefName = "CharcoalKiln",
            Label = "charcoal kiln",
            Description = "Where smoke lingers, value rises. It burns low and gives much.",
            Tier = ObjectTierDefOf.Rare,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Combustion,
                ObjectTagDefOf.Crafting,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Kindle, 2 },
            },
            Effects = new List<ObjectEffect>()
            {
                new SelfAdjacencyEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        NativeProductionAny = new List<ResourceDef>()
                        {
                            ResourceDefOf.Food,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Kindle, 1 },
                        },
                    },
                },
            },
        },

        
        new ObjectDef()
        {
            DefName = "VerdantIdol",
            Label = "verdant idol",
            Description = "Its roots twist deeper than the soil. Growth listens when it speaks.",
            Scale = 1.1f,
            Tier = ObjectTierDefOf.Epic,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Plant,
                ObjectTagDefOf.Fertilizer,
                ObjectTagDefOf.Idol,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 2 },
                { ResourceDefOf.Fertility, 1 },
            },
            Effects = new List<ObjectEffect>()
            {
                new AdjacencyEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Plant,
                        }
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Food, 1 }
                        },
                        AppliedObjectModifier = ModifierDefOf.VerdantlyIdolized,
                        AppliedObjectModifierDuration = 3,
                    },
                },
                new SelfEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TerrainAny = new List<TerrainDef>()
                        {
                            TerrainDefOf.FertileSoil,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Food, 1 },
                            { ResourceDefOf.Ornaments, 1 },
                        }
                    },
                }
            },
        },
        
        
        new ObjectDef()
        {
            DefName = "EmberCore",
            Label = "ember core",
            Description = "Still hot from wherever it came from. Burn carefully, or burn everything.",
            Scale = 1.1f,
            Tier = ObjectTierDefOf.Epic,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Combustion,
                ObjectTagDefOf.Hazard,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Kindle, 4 },
                { ResourceDefOf.Fertility, -2 },
            },
            Effects = new List<ObjectEffect>()
            {
                new AdjacencyEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Combustion,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Kindle, 2 },
                        }
                    },
                },
                new SelfEffect()
                {
                    EffectOutcome = new EffectOutcome()
                    {
                        AppliedTileModifier = ModifierDefOf.Scorched,
                        AppliedTileModifierDuration = 3,
                    }
                }
            }
        },
        
        new ObjectDef()
        {
            DefName = "BloomingPavillon",
            Label = "blooming pavillon",
            Description = "Built for nothing but beauty.",
            Scale = 1.1f,
            Tier = ObjectTierDefOf.Epic,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Structure,
                ObjectTagDefOf.Ornamental,
                ObjectTagDefOf.Prestige,
                ObjectTagDefOf.Luxury,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Ornaments, 2 },
                { ResourceDefOf.Herbs, 1 },
            },
            Effects = new List<ObjectEffect>()
            {
                new AdjacencyEffect()
                {
                    Radius = 2,
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Ornamental,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Ornaments, 1 },
                        }
                    },
                },
                new SelfEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagNearby = ObjectTagDefOf.Ornamental,
                        TagNearbyThreshhold = 3,
                        TagNearbyRadius = 2,
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        ResourceProductionModifier = new Dictionary<ResourceDef, int>()
                        {
                            { ResourceDefOf.Ornaments, 3 },
                        }
                    },
                },
            },
        },

        new ObjectDef()
        {
            DefName = "BronzeCoin",
            Label = "bronze coin",
            Description = "An old coin that's not worth a lot, but better than nothing.",
            Scale = 0.8f,
            Tier = ObjectTierDefOf.Common,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Metal,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Gold, 1 },
            }
        },

        new ObjectDef()
        {
            DefName = "SilverCoin",
            Label = "silver coin",
            Description = "A valuable coin providing some income.",
            Scale = 1f,
            Tier = ObjectTierDefOf.Rare,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Metal,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Gold, 2 },
            }
        },

        new ObjectDef()
        {
            DefName = "GoldCoin",
            Label = "gold coin",
            Description = "A precious coin worth a lot.",
            Scale = 1.1f,
            Tier = ObjectTierDefOf.Epic,
            Tags = new List<ObjectTagDef>()
            {
                ObjectTagDefOf.Metal,
            },
            NativeProduction = new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Gold, 3 },
            }
        },
    };

--- ObjectTagDefs.cs ---
    public static List<ObjectTagDef> Defs => new List<ObjectTagDef>()
    {
        new ObjectTagDef()
        {
            DefName = "Plant",
            Label = "plant",
            Description = "A living, rooted organism that typically grows from soil and may produce food.",
            Color = new Color(0.40f, 0.67f, 0.37f),
        },

        new ObjectTagDef()
        {
            DefName = "Vegetable",
            Label = "vegetable",
            Description = "An edible plant part, usually cultivated for food.",
            Color = new Color(0.82f, 0.59f, 0.20f),
        },

        new ObjectTagDef()
        {
            DefName = "Root",
            Label = "root",
            Description = "A subterranean plant part used for anchoring and nutrient storage. Often edible.",
            Color = new Color(0.58f, 0.39f, 0.26f),
        },

        new ObjectTagDef()
        {
            DefName = "Structure",
            Label = "structure",
            Description = "A built, non-living object that provides effects but does not grow or move.",
            Color = new Color(0.5f, 0.5f, 0.5f),
        },

        new ObjectTagDef()
        {
            DefName = "Fertilizer",
            Label = "fertilizer",
            Description = "An object or material that enhances the growth or productivity of nearby plants.",
            Color = new Color(0.36f, 0.45f, 0.23f),
        },

        new ObjectTagDef()
        {
            DefName = "Compost",
            Label = "compost",
            Description = "Decomposed organic matter that can enrich soil and support plant-based synergies.",
            Color = new Color(0.38f, 0.27f, 0.19f),
        },

        new ObjectTagDef()
        {
            DefName = "Herb",
            Label = "herb",
            Description = "Plants valued for their fragrance, flavor, or medicinal properties. Often small, leafy, and delicate.",
            Color = new Color(0.4f, 0.7f, 0.4f),
        },

        new ObjectTagDef()
        {
            DefName = "Marker",
            Label = "marker",
            Description = "Objects that signal boundaries or define structure within the garden, often passive but with strategic placement value.",
            Color = new Color(0.9f, 0.75f, 0.4f),
        },

        new ObjectTagDef()
        {
            DefName = "Combustion",
            Label = "combustion",
            Description = "Fire-based objects that produce heat or flames, often impacting soil and nearby objects.",
            Color = new Color(0.85f, 0.35f, 0.10f),
        },

        new ObjectTagDef()
        {
            DefName = "Permanent",
            Label = "permanent",
            Description = "Objects that stay in place after the daily scatter; persist until explicitly removed.",
            Color = new Color(0.5f, 0.5f, 0.5f),
        },

        new ObjectTagDef()
        {
            DefName = "Ornamental",
            Label = "ornamental",
            Description = "Objects valued for their visual appeal. Often used in decorative displays or to fulfill aesthetic orders.",
            Color = new Color(0.85f, 0.65f, 0.85f),
        },

        new ObjectTagDef()
        {
            DefName = "Flower",
            Label = "flower",
            Description = "A flowering plant or bloom that may produce ornaments or interact with pollinators.",
            Color = new Color(0.95f, 0.75f, 0.35f),
        },

        new ObjectTagDef()
        {
            DefName = "Animal",
            Label = "animal",
            Description = "Living creatures that may produce resources, affect nearby objects, or interact with terrain in unique ways.",
            Color = new Color(0.6f, 0.4f, 0.3f),
        },

        new ObjectTagDef()
        {
            DefName = "Pollinator",
            Label = "pollinator",
            Description = "Living creatures that increase production of nearby flowering or ornamental plants.",
            Color = new Color(0.95f, 0.85f, 0.4f),
        },

        new ObjectTagDef()
        {
            DefName = "Crafting",
            Label = "crafting",
            Description = "Objects related to manual creation, shaping, or preparation of materials for construction or trade.",
            Color = new Color(0.65f, 0.5f, 0.3f),
        },

        new ObjectTagDef()
        {
            DefName = "Idol",
            Label = "idol",
            Description = "Symbolic or sacred structures that influence nearby growth through unique and often passive effects.",
            Color = new Color(0.7f, 0.6f, 0.25f),
        },

        new ObjectTagDef()
        {
            DefName = "Hazard",
            Label = "hazard",
            Description = "Objects that have harmful or destabilizing effects on their environment. Use with caution.",
            Color = new Color(0.85f, 0.25f, 0.25f),
        },

        new ObjectTagDef()
        {
            DefName = "Prestige",
            Label = "prestige",
            Description = "Rare, sought-after objects valued for their uniqueness, influence, or symbolic importance. Often tied to major rewards or milestones.",
            Color = new Color(0.9f, 0.75f, 0.4f),
        },

        new ObjectTagDef()
        {
            DefName = "Luxury",
            Label = "luxury",
            Description = "High-value, non-essential objects prized for beauty or refinement. Often generate Ornaments or synergize with aesthetic effects.",
            Color = new Color(0.85f, 0.65f, 0.8f),
        },

        new ObjectTagDef()
        {
            DefName = "Metal",
            Label = "metal",
            Description = "Forged or naturally occurring metallic objects. Often conductive, durable, or valuable.",
            Color = new Color(0.75f, 0.75f, 0.8f),
        }
    };

--- ObjectTierDefs.cs ---
    public static List<ObjectTierDef> Defs => new List<ObjectTierDef>()
    {
        new ObjectTierDef()
        {
            DefName = "Common",
            Label = "common",
            Description = "Most common objects that are drafted at the end of each week.",
            MarketValue = 10,
            Color = ResourceManager.UiBackgroundLighter2,
            // Power level guideline: 100%
        },

        new ObjectTierDef()
        {
            DefName = "Rare",
            Label = "rare",
            Description = "Powerful rare objects that are harder to acquire. A Rare object is drafted at the end of each week.",
            MarketValue = 20,
            Color = new Color(0.3f, 0.5f, 0.9f),
            // Power level guideline: 200% 
        },

        new ObjectTierDef()
        {
            DefName = "Epic",
            Label = "epic",
            Description = "Very powerful but rare objects. An epic object is drafted at the end of each month (every 4th week).",
            MarketValue = 40,
            Color = new Color(0.6f, 0.4f, 0.8f),
            // Power level guideline: 400% 
        },

        new ObjectTierDef()
        {
            DefName = "Legendary",
            Label = "legendary",
            Description = "The most powerful objects. Legendary objects cannot be acquired through drafting.",
            MarketValue = 80,
            Color = new Color(0.95f, 0.6f, 0.2f),
            // Power level guideline: 800% 
        },

        new ObjectTierDef()
        {
            DefName = "Cursed",
            Label = "cursed",
            Description = "Objects with strictly negative effects, that are added as punishments or difficulty Modifiers. Cursed objects cannot be acquired through drafting.",
            Color = new Color(0.8f, 0.2f, 0.2f),
            // Power level guideline: Variable, always negative
        },

        new ObjectTierDef()
        {
            DefName = "Special",
            Label = "special",
            Description = "Extraordinary objects with extraordinary origin, effects and purposes. Special objects cannot be acquired through drafting.",
            MarketValue = 30,
            Color = new Color(0.3f, 0.85f, 0.8f),
            // Power level guideline: Variable, depending on object
        },
    };

--- TownMandateDefs.cs ---
    public static List<TownMandateDef> Defs => new List<TownMandateDef>()
    {
        // Jan
        new TownMandateDef()
        {
            DefName = "WinterSupplies",
            Label = "Winter Supplies",
            Description = "The town needs preserved goods and warmth for colder households.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 15 },
                { ResourceDefOf.Kindle, 5 },
            }),
        },


        // Feb
        new TownMandateDef()
        {
            DefName = "SchoolLunch",
            Label = "School Lunches",
            Description = "The primary school kitchen is reopening. Simple meals for energetic kids.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 35 },
                { ResourceDefOf.Herbs, 5 },
            }),
        },

        // Mar
        new TownMandateDef()
        {
            DefName = "SpringWellnessFestival",
            Label = "Spring Wellness Festival",
            Description = "Local apothecaries and herbalists host a market of healing and teas.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Herbs, 40 },
                { ResourceDefOf.Ornaments, 20 },
            }),
        },

        // Apr
        new TownMandateDef()
        {
            DefName = "TownBeautificationWeek",
            Label = "Town Beautification Week",
            Description = "Volunteers are decorating public spaces and planters across town.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Ornaments, 80 },
            }),
        },

        // May
        new TownMandateDef()
        {
            DefName = "FireFestival",
            Label = "Festival of Fire",
            Description = "An ancient bonfire festival honoring the changing season.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Kindle, 65 },
                { ResourceDefOf.Ornaments, 35 },
            }),
        },

        // Jun
        new TownMandateDef()
        {
            DefName = "SummerTradeCaravan",
            Label = "Summer Trade Caravan",
            Description = "The town is preparing a gift shipment for visiting merchants.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 25 },
                { ResourceDefOf.Herbs, 25 },
                { ResourceDefOf.Ornaments, 25 },
                { ResourceDefOf.Kindle, 25 },
                { ResourceDefOf.Fiber, 25 },
            }),
        },

        // Jul
        new TownMandateDef()
        {
            DefName = "WeaversFair",
            Label = "Weaver's Fair",
            Description = "Tailors, spinners, and dyers from nearby towns gather to showcase work.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Fiber, 80 },
                { ResourceDefOf.Herbs, 40 },
                { ResourceDefOf.Ornaments, 20 },
            }),
        },

        // Aug
        new TownMandateDef()
        {
            DefName = "MidSummerBanquet",
            Label = "Mid-Summer Banquet",
            Description = "A grand feast in the central square. Public and guests welcome.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 100 },
                { ResourceDefOf.Herbs, 30 },
                { ResourceDefOf.Ornaments, 30 },
            }),
        },

        // Sep
        new TownMandateDef()
        {
            DefName = "RainstockPrep",
            Label = "Rainstock Prep",
            Description = "Autumn rains are coming. Stockpiling waterproof goods and dry fuel.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Fiber, 70 },
                { ResourceDefOf.Kindle, 70 },
                { ResourceDefOf.Food, 40 },
            }),
        },

        // Oct
        new TownMandateDef()
        {
            DefName = "FragranceFestival",
            Label = "Festival of Fragrance",
            Description = "A town-wide parade of petals, perfumes, and herbal arrangements.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Ornaments, 100 },
                { ResourceDefOf.Herbs, 60 },
                { ResourceDefOf.Food, 40 },
            }),
        },

        // Nov
        new TownMandateDef()
        {
            DefName = "HarvestExchange",
            Label = "Harvest Exchange",
            Description = "The annual harvest fair allows townsfolk to trade surplus goods freely.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 70 },
                { ResourceDefOf.Fiber, 60 },
                { ResourceDefOf.Kindle, 60 },
                { ResourceDefOf.Ornaments, 30 },
            }),
        },

        // Dec
        new TownMandateDef()
        {
            DefName = "WinterCrownCeremony",
            Label = "Winter Crown Ceremony",
            Description = "A ceremonial offering for the town's oldest tradition.",
            OrderedResources = new(new Dictionary<ResourceDef, int>()
            {
                { ResourceDefOf.Food, 85 },
                { ResourceDefOf.Ornaments, 65 },
                { ResourceDefOf.Herbs, 55 },
                { ResourceDefOf.Kindle, 35 },
            }),
        },
    };

--- ResourceDefs.cs ---
    public static List<ResourceDef> Defs => new List<ResourceDef>()
    {
        // Currency
        new ResourceDef()
        {
            DefName = "Gold",
            Label = "gold",
            Description = "The currency of this world. Can be used to buy new garden tiles or to buy resources and objects in the shop.\nGold is gained by completing orders and more inefficiently by selling resources at the shop.",
            Type = ResourceType.Currency,
        },

        // Market resources
        new ResourceDef()
        {
            DefName = "Food",
            Label = "food",
            Description = "Basic edible output from plants and animals. Most customers request food regularly.",
            Type = ResourceType.MarketResource,
        },

        new ResourceDef()
        {
            DefName = "Herbs",
            Label = "herbs",
            Description = "Fragrant or medicinal plants used in kitchens, clinics, and cosmetics. A niche demand, but valued by certain customers.",
            Type = ResourceType.MarketResource,
        },

        new ResourceDef()
        {
            DefName = "Ornaments",
            Label = "ornaments",
            Description = "Visually pleasing or fragrant goods used to beautify spaces. Includes flowers, decorative plants, and handmade items with aesthetic value.",
            Type = ResourceType.MarketResource,
        },

        new ResourceDef()
        {
            DefName = "Kindle",
            Label = "kindle",
            Description = "Dry, flammable materials gathered for fires and warmth. Used by townsfolk for cooking, heating, and rituals.",
            Type = ResourceType.MarketResource,
        },

        new ResourceDef()
        {
            DefName = "Fiber",
            Label = "fiber",
            Description = "Natural strands used in weaving, binding, and crafting. Essential for cloth, ropes, and light construction.",
            Type = ResourceType.MarketResource,
        },

        // Abstract resources
        new ResourceDef()
        {
            DefName = "Fertility",
            Label = "fertility",
            Description = "Enriches or depletes the soil fertility the object lands on. Terrain may change at certain fertility threshholds.",
            Type = ResourceType.AbstractResource,
        },
    };

--- TerrainDefs.cs ---
    public static List<TerrainDef> Defs => new List<TerrainDef>()
    {
        new TerrainDef()
        {
            DefName = "Soil",
            Label = "soil",
            Description = "Soil, good for plants to grow on.",
            BetterFertilityTerrainDefName = "FertileSoil",
            WorseFertilityTerrainDefName = "BarrenSoil",
        },

        new TerrainDef()
        {
            DefName = "FertileSoil",
            Label = "fertile soil",
            Description = "Fertile soil, increasing the production of plants on it.",
            WorseFertilityTerrainDefName = "Soil",
            Effects = new List<ObjectEffect>()
            {
                new TerrainEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Plant,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        NativeProductionModifier = 1,
                    },
                },
            },
        },

        new TerrainDef()
        {
            DefName = "BarrenSoil",
            Label = "barren soil",
            Description = "Soil stripped of vitality. Plants struggle to grow here, yielding less than usual.",
            BetterFertilityTerrainDefName = "Soil",
            Effects = new List<ObjectEffect>()
            {
                new TerrainEffect()
                {
                    EffectCriteria = new EffectCriteria()
                    {
                        TagsAny = new List<ObjectTagDef>()
                        {
                            ObjectTagDefOf.Plant,
                        },
                    },
                    EffectOutcome = new EffectOutcome()
                    {
                        NativeProductionModifier = -1,
                    },
                },
            },
        },
    };

